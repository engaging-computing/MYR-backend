swagger: '2.0'
info:
  description: |
    The API for LearnMYR.org.
  version: 1.0.0
  title: MYR API - V1
  termsOfService: http://learnmyr.org/about/tos
  contact:
    email: support@learnmyr.org
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
host: learnmyr.org
basePath: /apiv1
schemes:
- https
consumes:
- application/json
produces:
- application/json
tags:
- name: Lessons
  description: Lessons API
- name: Courses
  description: Courses API
- name: Users
  description: Users API
- name: Reference Examples
  description: Reference Examples API
- name: Snapshots
  description: Snapshots API
paths:
  /lessons:
    get:
      tags:
      - Lessons
      summary: Get all lessons
      operationId: getLessons
      produces:
      - application/json
      responses:
        200:
          description: Array of all lessons
          schema: 
              type: array
              items: 
                $ref: '#/definitions/Lesson'
    post:
      tags:
      - Lessons
      summary: Create a new lesson
      operationId: createLesson
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Lesson that needs to be created
        required: true
        schema:
          $ref: '#/definitions/NewLesson'
      - in: header
        name: x-access-token
        type: string
        required: true
      responses:
        201:
          description: Lesson created
          schema: 
              $ref: '#/definitions/Lesson'
        401:
          description: Unauthorized
        500:
          description: Internal Server Error
  /lessons/id/{id}:
    get:
        tags:
        - Lessons
        summary: Get a lesson by ID
        operationId: getLesson
        produces:
        - application/json
        parameters:
          - name: id
            in: path
            description: ID of the requested lesson
            required: true
            type: string
        responses:
          200:
            description: Lesson object
            schema: 
                $ref: '#/definitions/Lesson'
    put:
      tags:
      - Lessons
      summary: Update a lesson
      operationId: updateLesson
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Lesson properties to update
        required: true
        schema:
          $ref: '#/definitions/NewLesson'
      - name: id
        in: path
        description: ID of the requested lesson to update
        required: true
        type: string
      - in: header
        name: x-access-token
        type: string
        required: true
      responses:
        200:
          description: Lesson updated
          schema: 
              $ref: '#/definitions/Lesson'
        401:
          description: Unauthorized
        500:
          description: Internal Server Error
    delete:
        tags:
        - Lessons
        summary: Delete a lesson by ID
        operationId: deleteLesson
        produces:
        - application/json
        parameters:
          - name: id
            in: path
            description: ID of the lesson to delete
            required: true
            type: string
          - in: header
            name: x-access-token
            type: string
            required: true
        responses:
          200:
            description: Lesson deleted
  /courses:
    get:
      tags:
      - Courses
      summary: Get all courses
      operationId: getCourses
      produces:
      - application/json
      responses:
        200:
          description: Array of all courses
          schema: 
              type: array
              items: 
                $ref: '#/definitions/Course'
    post:
      tags:
      - Courses
      summary: Create a new course
      operationId: createCourse
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Course that needs to be created
        required: true
        schema:
          $ref: '#/definitions/NewCourse'
      - in: header
        name: x-access-token
        type: string
        required: true
      responses:
        201:
          description: Course created
          schema: 
              $ref: '#/definitions/Course'
        401:
          description: Unauthorized
          schema: 
              $ref: '#/definitions/Unauthorized'
        500:
          description: Internal Server Error
  /courses/{name}:
    get:
        tags:
        - Courses
        summary: Get a course by its shortname
        operationId: getCourseByShortname
        produces:
        - application/json
        parameters:
          - name: name
            in: path
            description: Shortname of the requested course
            required: true
            type: string
        responses:
          200:
            description: Requested course is returned
            schema: 
                $ref: '#/definitions/Course'
  /courses/id/{id}:
    get:
        tags:
        - Courses
        summary: Get a course by ID
        operationId: getCourseByID
        produces:
        - application/json
        parameters:
          - name: id
            in: path
            description: ID of the requested course
            required: true
            type: string
        responses:
          200:
            description: Requested course is returned
            schema: 
                $ref: '#/definitions/Course'
    put:
      tags:
      - Courses
      summary: Update a lesson
      operationId: updateCourse
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Course properties to update
        required: true
        schema:
          $ref: '#/definitions/NewCourse'
      - name: id
        in: path
        description: ID of the requested course to update
        required: true
        type: string
      - in: header
        name: x-access-token
        type: string
        required: true
      responses:
        200:
          description: Course updated
          schema: 
              $ref: '#/definitions/Course'
        401:
          description: Unauthorized
          schema: 
              $ref: '#/definitions/Unauthorized'
        500:
          description: Internal Server Error
    delete:
        tags:
        - Courses
        summary: Delete a course by ID
        operationId: deleteCourse
        produces:
        - application/json
        parameters:
          - name: id
            in: path
            description: ID of the course to delete
            required: true
            type: string
          - in: header
            name: x-access-token
            type: string
            required: true
        responses:
          200:
            description: Course deleted
          401:
            description: Unauthorized
            schema: 
              $ref: '#/definitions/Unauthorized'
          500:
            description: Internal Server Error
  /snapshots:
    get:
      tags:
      - Snapshots
      summary: Get all snapshots
      operationId: getSnapshots
      produces:
      - application/json
      parameters:
          - in: header
            name: x-access-token
            type: string
            required: true
      responses:
        200:
          description: Array of all snapshots
          schema: 
              type: array
              items: 
                $ref: '#/definitions/Snapshot'
        401:
            description: Unauthorized
            schema: 
              $ref: '#/definitions/Unauthorized'
    post:
      tags:
        - Snapshots
      summary: Create a new snapshot
      operationId: createSnapshot
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Snapshot that needs to be created
        required: true
        schema:
          $ref: '#/definitions/NewSnapshot'
      - in: header
        name: x-access-token
        type: string
        required: true
      responses:
        201:
          description: Snapshot created
          schema: 
              $ref: '#/definitions/Snapshot'
        401:
          description: Unauthorized
          schema: 
              $ref: '#/definitions/Unauthorized'
        500:
          description: Internal Server Error
  /snapshots/{user}/{timestamp}:
    get:
        tags:
          - Snapshots
        summary: Get a snapshot by user ID and timestamp
        operationId: getSnapshotByUserTime
        produces:
        - application/json
        parameters:
          - name: user
            in: path
            description: User ID of requested snapshot
            required: true
            type: string
          - name: timestamp
            in: path
            description: Timestamp of requested snapshot
            required: true
            type: string
          - in: header
            name: x-access-token
            type: string
            required: true
        responses:
          200:
            description: Requested snapshot is returned
            schema: 
                $ref: '#/definitions/Snapshot'
          401:
            description: Unauthorized
            schema: 
                $ref: '#/definitions/Unauthorized'
  /snapshots/id/{id}:
    get:
        tags:
          - Snapshots
        summary: Get a snapshot by ID
        operationId: getSnapshotByID
        produces:
        - application/json
        parameters:
          - name: id
            in: path
            description: ID of the requested course
            required: true
            type: string
        responses:
          200:
            description: Requested course is returned
            schema: 
                $ref: '#/definitions/Snapshot'
definitions:
  Unauthorized:
    type: "string"
    example: "Error 401: Not authorized"
  Lesson:
    allOf:
      - $ref: '#/definitions/NewLesson'
      - required:
        - _id
        - __v
        type: object
        properties:
          _id:
            type: string
            example: "5c5b173d7682e1058205e316"
          __v:
            type: integer
            example: 1
  NewLesson:
    type: "object"
    required:
      - name  
      - prompt
      - code
    properties:
      name:
        type: string
        example: "Intro to Geometries"
      prompt:
        type: string
        example: "This lesson will introduce you to using geometries."
      code:
        type: string
        example: "box();"   
  Course:
    allOf:
      - $ref: '#/definitions/NewCourse'
      - required:
        - id
        - __v
        type: object
        properties:
          _id:
            type: string
            example: "5c5b180c7682e1058205e31d"
          __v:
            type: integer
            example: 1
  NewCourse:
    type: "object"
    required:
      - name  
      - shortname
      - difficulty
      - description
    properties:
      name:
        type: string
        example: "Intro to Geometries"
      shortname:
        type: string
        example: "geometries"
      description:
        type: string
        example: "This course will introduce you to using geometries." 
      difficulty:
        type: integer
        example: 2
      lessons:
        type: array
        example: ["5c5b173d7682e1058205e316","5c5b17557682e1058205e317"]
  Snapshot:
    allOf:
      - $ref: '#/definitions/NewSnapshot'
      - required:
        - id
        - __v
        type: object
        properties:
          _id:
            type: string
            example: "5c5b180c7682e1058205e31d"
          __v:
            type: integer
            example: 1
  NewSnapshot:
    type: "object"
    required:
      - user
      - timestamp
      - text
      - error
    properties:
      user:
        type: string
        example: "c83nf38nf3n09fn303f"
      timestamp:
        type: string
        format: date-time
        example: "2018-10-19T04:35:51.196Z"
      text:
        type: string
        example: "box();"
      error:
        type: boolean
        example: true